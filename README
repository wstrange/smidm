


This is mostly a science project :-)

It is a simple Identity Management Synchronization engine written as a way to explore Scala and Mongo and the (now defunct)
Identity Connector Framework (ICF).



There is no GUI component. Have a look at the unit tests to get an idea of how to write synchronization scripts.
Here is a snippet:


 /**
   * Tests sync from a flat file
   */
  test("Sync from Flat File") {
    MongoUtil.dropAndCreateDB
    TestData.defineRoles




    val flatfile = Resource.flatfile1
    val ldapResource = Resource.ldapTest


    // load any old users in ldap - this will
    var count = syncManager.loadFromResource(ldapResource, correlateByLDAPUid, createUserIfMissing = true)


    // create a transform closure to perform the sync transformations
    // this is where you implement your sync logic to decide which attribute goes where

    val transform = {
      // userview is the runtime view of the user, ICAttributes are the incoming attributes to sync
      (u: UserView, a: ICAttributes) =>
      // update user attributes
        u.user("department") = a("department")
        u.user("email") = a("email")
        u.user("managerId") = a("managerId")
        // test setting an extended attribute
        u.user("attribute.attr1") = 1.asInstanceOf[AnyRef]

        u.ensureHasResource(ldapResource)
        // set the LDAP employeeNumber according to some funky calculation..
        // assumes the user has an ldap account
        // if the createMissingAccounts flag is set on the sync process the account will get created
        //u(ldapResource, "employeeNumber") = "C" + u.user.department
        val ldapAccount = u.getResourceObjects(ldapResource)(0)
        ldapAccount("employeeNumber") = "C" + u.user.employeeId


        // test some extended attributes
        u.user.attributes.put("attr2", "foo")

        // should have the ldap account assigned
        assert(u.user.isResourceDirectlyAssigned(ldapResource))
        u.printDebug
    }


    syncManager.sync(flatfile, transform, correlateByAccountName, RuleDefinitions.DeptAssignment, createMissingAccounts = true) // trigger creation of any uncorrelated accounts

    val u = UserDAO.findByAccountName("test1")
    debug("Got back a user=" + u.get)
    val uv2 = new UserView(u.get)
    uv2.printDebug()

    // check to see if the user got put in the Marketing Group as a result of the Role Assignment
    //val g = uv2(ldapResource,"groups").asInstanceOf[Seq[String]]
    //assert( g.contains(TestData.marketingGroupEntitlement.attrVal))

    // run the recon manager to flush out changes

    new ReconManager().recon(ldapResource)
  }



Warren Strange - April 2011

Test

