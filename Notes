


Doc structure ideas


User collection

users { accountId:fred, lastLogin:asdfd,  .... }

Account - each instance is a collection:
ldapProd { uid:foo, etc. etc. , , version=1, needsSync=1}


Account collection to contain mapping to user:

accountAssignment {   user: $user_id,  accountCollection: "ldapProd",  accountId: $account_id", createdTime: ... }



Creating a new user with an ldap account:
users += { _id:1, accountId:'Fred' }


- should be pure account attr - no meta data to confuse things.

ldapProd += { _id:2,  accountId:'fflinstone', .... }

accountIndex += { user:1, accountCollection:ldapProd, accountId:2, needsSync = true }

        --> for efficient - send all new needsSync account ids to sync process. In the event of failure a batch
                process selects all needsSync = true to sync

Find all ldap accounts:  ldapProd.findAll

Find all unclaimed ldap accounts? expensive....
        but you could recon into accountAssignment - where user:'unclaimed'

        all accounts in unclaimed

       recon process:
          for each icf account
                if account not in accountcollection
                        add it to collection, plus add it to accountIndex
                        if correlate to user - set user link as well
                update any authoriative attrs?


 Sync process:

 read each account from HR sorucec (flat file,eetc)
        is user is new - Construct user,
            add accounts as required (or link?)
            see if any unlinked accounts exist?
        set attrs
        update accounts, set  needsSync = true



How to avoid syncing everything????

    syncHint attribute in account index?? Sync only a handfull of attrs
            syncData: [department, ]


Roles -
role = { name, type (biz, etc.), containedRoles, accountsToAdd,





TODO:

implicit conversions - from connector obj to mongoobj to hashmap, etc.


